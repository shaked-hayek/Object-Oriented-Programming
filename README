shaked.hayek
shirlevy


## UML explanation
At the beginning we assumed all classes of objects (except leaves maybe) will be used by the GameManager. As
well, we saw that the ground and leaves would are using Block - so we assumed both will extend it. We thought
the Tree should extend Leaf at some way as well.  Also, we didn't exactly understand when we'll use Utils and
ColorSupplier.

After we worked on the project for a while, we understood we could use the object a little different from what
 we thought. We created Leaf and Snowflake as extensions for Block - this game object fits and is useful in
 these cases. Tree is not extending Leaf as we though but it's using Leaf - this way both of them has their
 own responsibility and less depending on one another (when it's not necessary). PepseGameManager
 extends GameManager, and is using almost all GameObjects: Night, Sun, SunHalo, Sky, Tree, Avatar, SnowFlake
 and EnergyText. Tree uses Leaf (which is not called from Manager).
This way we made sure each class has it's own clear responsibility, as well as created order in the project.


## Endless world
In order to make the world endless and have a minimum of calculations to do, we chose to have only few blocks
in each direction beyond the screen shown - a buffer. When the avatar moves a distance larger than half the
buffer, we create the world on one side, and remove it on the other side, such that each side will have the
same number of blocks. We had to deal with deleting and creating again the same view of terrain and trees: 
* For the terrain, for creating again in same way we used a noise function that isn't random based. For 
deleting, in order to know which blocks we need to delete we created a hash map that maps x coordinate to
list of blocks.
* For the trees, we created a hash map, mapping each x to the tree stem blocks we created. If the list is null
we know there is no tree in that coordinate. If the list exists but the first object in the list is null we 
know that the tree is deleted and we can recreate it, in the size of the list. If the x coordinate doesn't 
exist in map, we create tree randomly and add it to the map.
To deal with the leaves we had a separate hash map that maps x coordinate to list of leaves. Because the size
of the leaves block is determined by the size of the stem, we can recreate it easily.


## Tree choices

Tree:
* We needed to know what height to make each tree. That is, what is the height of the ground at a certain
x coordinate. We chose to pass as argument to Tree class the function for calculating the height of the
ground, that is a static function in Terrain class. That way Tree class has all the info it need for creating
trees and doesn't have access to other unnecessary information.
* We chose not to have two trees one after the other, so that the view will look good, and also not have a
tree right in the middle of the screen when we start, so that there won't be a tree in the place that we
create the avatar.
* We chose to plant trees at size of at least 4 blocks (otherwise it looks more like a bush).
* We ensured a tree can't be tall as the screen goes, but only 3/4 of it at most.
* We created the leaves as a square (as described in the instructions) such that the bottom of the leaves
square is about 1/4 of the stem size from the top, and every edge is about 1/2 the stem size. Minimum size of
leaves will be edges of 2.
* At every point of the game, when we get to new ground (that the avatar hasn't visited before), we get a
random number for every x-coordinate, and so, in a chance of 10% we plant a tree in random size as described,
and create it's leaves accordingly.

Leaf:
* We created moving transitions (moving angle, changing width) in one function, and used it in same delay time
 - we did that so the leaves will move almost together to get the filling of wind (it felt more realistic than
  leaves going in opposing directions).
* We created the falling leaf transition - as it fades out, a time for it to be born again is declared and it
falls down to the ground (and disappears).
* All delay times for transitions are decided at scheduledTransitionTask() function, called straight from the
constructor - so every leaf will have it's life circle right when it's created.
* We made sure a leaf can only collide with ground - and not any other object. On collision, the leaf stops
moving (and soon disappears).
* When a leaf is born again - we add it to the game again to the same spot on the tree (not faded-out as
before). we create it's transitions again.
* We added removeLeaf() that is public and used from Tree - it removes all components from leaf when they are
not necessary (as in - the avatar is far from them in the world so they are not seen).




## Design choices
* Avatar's energy reduction - We felt that subtracting energy only when the flying keys are pressed seemed 
less optimal. We wanted to reduce energy as long as the avatar is in the sky and not jumping - because this
is the time he is actually flying. So we decided to regard flying time as all time after the flying keys were
pressed and avatar didn't collide with anything and energy is still not 0.
* Utils - We chose to create a utils class to hold functions we used a few times in different places in the
project, in order to minimize length of code in the classes, and have a constant method to calculate the
world data - encapsulation.
* In order to minimize the amount of calculations in each frame, we put the top level of blocks in
terrain in a different layer than the rest of the blocks. We made the layer of the top level the only layer
that we need to calculate collisions on. This way there were less collision calculations.
* Leaf and SnowFlake - We chose to have separate classes for leaf and snowflake, because they had attributes
that are unique to them.
* Animation - We worked on having the right animation for each state of the avatar and making the game feel
logical and smooth. For example, having different animation for jumping up and jumping down.
* We chose to have all of the layers managed by the game manager to have good control about objects'
locations.


## BONUS
* We created the avatar as a penguin, and added different animations for flying, jumping, walking and 
standing.
* Because the avatar is a penguin, we made the ground in a snow color.
* We added snowflakes falling randomly from the sky and fades out when touching the ground, just like snow. We
 don't want snowflakes to collide with other object to not confuse the player too much.
* We added an energy text bar, with different colors for different energy values.
